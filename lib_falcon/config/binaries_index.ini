; This file maps grip identifiers (A, B, C, ...) to DLL names
; The DLLs are stored in the same bin folder with the other
; HDAL DLLs

; As a temporary measure, there may be no space around the = nor
; anything after the value

;; Grips respond to all Grip API functions and command codes.
;; If a function/code combination does not make sense for a
;; particular grip, it responds with the null response: "get"
;; functions return zero or false, and "set" functions take no
;; actions.  Otherwise, each grip returns as indicated above its
;; entry in the table below.
;;
;    hdlGripGetAttribute(HDL_GRIP_ID, 0, &gripID)
;      sets "gripID" to the character value of the key used below

[GRIPS]
;; A, B, and C are essentially similar, except for the value
;; returned by the HDAL_GRIP_MASS command code
;    hdlGripGetAttributesb(HDL_GRIP_BUTTON, count, &array)
;      populates "count" values in "array" with boolean button states
;    hdlGripGetAttributeb(HDL_GRIP_BUTTON, index, &value)
;      sets "value" to boolean state of "index"th button
;    hdlGripGetAttributeb(HDL_GRIP_HELD, 0, &value)
;      sets "value" to true if grip is attached, false if not attached
;    hdlGripGetAttributed(HDL_GRIP_MASS, 0, &value)
;      sets "value" to mass of grip
;    hdlGripGetAttributev(HDL_GRIP_POSITION, 0, &vector)
;      sets "vector", a 3-element array, to X,Y,Z position
;    hdlGripSetAttributev(HDL_GRIP_FORCE, 0, &vector)
;      sets grip force command from "vector", a 3-element array
;    hdlGripQuery(HDL_GRIP_BUTTON)
;      returns count of buttons (4)
A=ball.dll
B=ball.dll
C=pistol01.dll

;; This is a special-order grip for surgical simulations
;    hdlGripGetAttributesb(HDL_GRIP_BUTTON, count, &array)
;      populates "count" values in "array" with boolean button states
;    hdlGripGetAttributeb(HDL_GRIP_BUTTON, index, &value)
;      sets "value" to boolean state of "index"th button
;    hdlGripGetAttributesd(HDL_GRIP_ORIENTATION, 16, &array)
;      fills a 16-item "array" with the OpenGL Transform matrix
;      representation of the 3D orientation
;    hdlGripGetAttributesd(HDL_GRIP_QUATERNION, 4, &array)
;      fills a 4-item "array" with the quaternion representation
;      of the 3D orientation, where the first item is the scalar
;      component of the quaternion and the remaining three items
;      are the vector component
;    hdlGripGetAttributesd(HDL_GRIP_AXISANGLE, 4, &array)
;      fills a 4-item "array" with the axis-angle representation
;      of the 3D orientation, where the first three items are the
;      vector axis of rotation and the fourth item is the rotation
;      about the axis, measured in radians.
;    hdlGripGetAttributesd(HDL_GRIP_ANGLE, 4, &array)
;      fills a 4-item "array" with the three Euler angles of
;      3D rotation and one "squeeze" angle.  The order is
;      pitch, roll, yaw, and squeeze.
;    hdlGripGetAttributed(HDL_GRIP_ANGLE, index, &value)
;      sets "value" to selected angle.  See previouse entry
;      for ordering of angles.
;    hdlGripSetAttributesd(HDL_GRIP_TORQUE, 3 or 4, &vector)
;      sets grip torque command from "vector", a 3-element array.
;      if count is 4, also sets "squeeze" torque.
;    hdlGripSetAttributed(HDL_GRIP_TORQUE, index, &value)
;      set single grip torque from "value", were order is same
;      as above
;    hdlGripQuery(HDL_GRIP_BUTTON)
;      returns count of buttons (4)
d=grip4dof.dll

;; This is a derivative of the 'd' grip, for the MMC project
;  Adds four limit switch 'buttons
;    hdlGripQuery(HDL_GRIP_BUTTON)
;      returns count of buttons (8)
;    hdlGripGetAttributesd(HDL_GRIP_BUTTON, count &array)
;      returns four "legacy" buttons in 0-3
;      returns four "limit"  buttons in 4-7
e=gripMMC.dll

;; This is a derivative of the 'd' grip, for the DTS project
f=gripDTS.dll

; This section maps the beginnings of serial numbers to the
; binary code that must be downloaded to them.  The "G" at the
; beginning is present just to make a valid symbol for searching.
[BINARIES]
; Normal base units
G12=falcon_12_0101.bin
G13=falcon_12_0101.bin
G14=falcon_12_0101.bin
G15=falcon_12_0101.bin
G16=falcon_12_0101.bin
; Pro base units
G22=falcon_12_0101.bin
G23=falcon_12_0101.bin
G24=falcon_12_0101.bin
G25=falcon_12_0101.bin
G26=falcon_12_0101.bin
; LW Pro base units
G32=falcon_12_0101.bin
G33=falcon_12_0101.bin
G34=falcon_12_0101.bin
G35=falcon_12_0101.bin
G36=falcon_12_0101.bin
; Special base units
GA2=falcon_A2_0101.bin
GA3=falcon_A2_0101.bin
GA4=falcon_A2_0101.bin
GA5=falcon_A2_0101.bin
GA6=falcon_A2_0101.bin
; Max base units
GB2=falcon_A2_0101.bin
GB3=falcon_A2_0101.bin
GB4=falcon_A2_0101.bin
GB5=falcon_A2_0101.bin
GB6=falcon_A2_0101.bin
; Pro Super base units
GC2=falcon_A2_0101.bin
GC3=falcon_A2_0101.bin
GC4=falcon_A2_0101.bin
GC5=falcon_A2_0101.bin
GC6=falcon_A2_0101.bin
; LW Pro Super base units
GD2=falcon_A2_0101.bin
GD3=falcon_A2_0101.bin
GD4=falcon_A2_0101.bin
GD5=falcon_A2_0101.bin
GD6=falcon_A2_0101.bin
; Smart grips
; osg left
Gj1=grip_j1_0101.bin
; osg right
Gk1=grip_k1_0101.bin
; MMC
Gl1=grip_l1_0101.bin
; DTS
Gm1=grip_m1_0101.bin
